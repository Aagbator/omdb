{"version":3,"sources":["components/movie-card/movie-card.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","title","src","imageUrl","alt","year","SearchBox","type","onChange","onHandleSearch","placeholder","App","getMovies","filteredMovies","map","movie","Title","Poster","Year","key","imdbID","e","setState","target","value","state","isloadingMovies","filterText","movies","fetch","then","response","json","Search","this","filter","includes","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAeeA,G,MAZI,SAACC,GAChB,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,OACX,yBAAKD,UAAU,eACX,yBAAKE,IAAKH,EAAMI,SAAUC,IAAKL,EAAMI,YAEzC,yCAAeJ,EAAMM,SCDlBC,G,MANG,SAACP,GAAD,OACd,yBAAKC,UAAU,UACX,2BAAOO,KAAK,SAASC,SAAUT,EAAMU,eAAgBC,YAAY,8BCsD1DC,G,kBApDb,aAAc,IAAD,8BACX,+CAeDC,UAAY,SAACC,GACX,OAAOA,EAAeC,KAAI,SAACC,GAAD,OACzB,kBAAC,EAAD,CAAWd,MAAOc,EAAMC,MAAOb,SAAUY,EAAME,OAAQZ,KAAMU,EAAMG,KAAMC,IAAKJ,EAAMK,aAlB3E,EAsBZX,eAAiB,SAACY,GAChB,EAAKC,SAAS,CAAC,WAAcD,EAAEE,OAAOC,SApBvC,EAAKC,MAAQ,CACXC,iBAAiB,EACjBC,WAAY,GACZC,OAAQ,IANC,E,iFAUO,IAAD,OACjBC,MAAM,8DACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GAAM,OAAI,EAAKN,SAAS,CAACM,OAAQA,EAAOK,OAAQP,iBAAiB,S,+BAcvE,IAAIb,EADE,EAEwBqB,KAAKT,MAA5BE,EAFD,EAECA,WAGP,OAFAd,EAHM,EAEae,OACKO,QAAO,SAACP,GAAD,OAAYA,EAAOV,KAAKkB,SAAST,MAG9D,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAECkC,KAAKT,MAAMC,gBAQZ,kDAPF,kBAAC,IAAMW,SAAP,KACE,kBAAC,EAAD,CAAW5B,eAAkByB,KAAKzB,iBAClC,6BAAST,UAAU,mBACdkC,KAAKtB,UAAUC,U,GAzCZyB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.184fd02f.chunk.js","sourcesContent":["import React from 'react';\nimport '../movie-card/movie-card.css';\n\n const MovieCard = (props) => {\n    return (\n        <div className='card'>\n            <h4>{props.title}</h4>\n            <div className='img-wrapper'>\n                <img src={props.imageUrl} alt={props.imageUrl}  /> \n            </div>\n            <p>Released : {props.year}</p>\n        </div>\n    )\n}\n\nexport default MovieCard;","import React from 'react';\nimport '../search/search.css';\n\nconst SearchBox = (props) => (\n    <div className=\"search\">\n        <input type=\"search\" onChange={props.onHandleSearch} placeholder=\"Search by release year\" />\n    </div>\n)\n\nexport default SearchBox;","import React from 'react';\nimport MovieCard from '../src/components/movie-card/movie-card.component';\nimport SearchBox from '../src/components/search/search.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state = {\n      isloadingMovies: true,\n      filterText: '',\n      movies: []\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"http://www.omdbapi.com/?apikey=304d4af1&page=1&s='titanic'\")\n    .then(response => response.json())\n    .then(movies => this.setState({movies: movies.Search, isloadingMovies: false}));\n  }\n\n   getMovies = (filteredMovies) => {\n     return filteredMovies.map((movie) => \n      <MovieCard title={movie.Title} imageUrl={movie.Poster} year={movie.Year} key={movie.imdbID}></MovieCard>\n     )\n   }\n\n   onHandleSearch = (e) => {\n     this.setState({'filterText': e.target.value});\n   }\n\n  render(){\n    let filteredMovies = [];\n    const {filterText, movies}  = this.state;\n    filteredMovies = movies.filter((movies) => movies.Year.includes(filterText));\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>OMDB MOVIE LIST</h1>\n        </header>\n        { !this.state.isloadingMovies ? \n        <React.Fragment>\n          <SearchBox onHandleSearch = {this.onHandleSearch}></SearchBox>\n          <section className='movie-container'>\n              {this.getMovies(filteredMovies)}\n          </section>\n        </React.Fragment>\n        : \n          <h1>Loading Movies ...</h1>\n        }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}